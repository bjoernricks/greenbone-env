#!/usr/bin/env python3

import argparse
import os
import stat

from pathlib import Path

DEFAULT_PREFIX = Path.home() / 'install' / 'master'
DEFAULT_SOURCEDIR = Path.home() / 'sources' / 'master'
DEFAULT_MODULES = ['openvas-smb', 'gvm-libs', 'openvas', 'gvmd', 'gsa']


def create_parser():
    parser = argparse.ArgumentParser(  # pylint: disable=invalid-name
        description='Create an environment for Greenbone development.'
    )

    parser.add_argument(
        'prefix',
        nargs='?',
        default=DEFAULT_PREFIX,
        help='Root directory where your files will be installed '
        '(default: %(default)s).',
    )

    parser.add_argument(
        'sourcedir',
        nargs='?',
        default=DEFAULT_SOURCEDIR,
        help='Source directory where your modules can be found '
        '(default: %(default)s).',
    )

    parser.add_argument(
        'builddir',
        nargs='?',
        help='Root for your build directories (default: $PREFIX/build).',
    )

    parser.add_argument(
        '--modules',
        nargs='*',
        metavar="MODULE",
        default=DEFAULT_MODULES,
        help='Modules to build (default: %s).' % ' '.join(DEFAULT_MODULES),
    )
    return parser


def filter_none(paths):
    return [path for path in paths if path is not None]


def replace_vars(template, args):
    # pylint: disable=invalid-name

    builddir = args.builddir or Path(args.prefix) / 'build'
    t = template.replace('__PREFIX__', str(args.prefix))
    t = t.replace('__SRCPREFIX__', str(args.sourcedir))
    t = t.replace('__MODULES__', " ".join(args.modules))
    t = t.replace('__BUILDPREFIX__', str(builddir))
    t = t.replace('\\__', "__")
    return t


def main():
    parser = create_parser()
    args = parser.parse_args()

    prefix = Path(args.prefix).absolute()
    prefix.mkdir(parents=True, exist_ok=True)

    bindir = prefix / 'bin'
    bindir.mkdir(exist_ok=True)

    template_files = ['activate', 'build', 'build-all']

    for name in template_files:
        script_file = bindir / name

        template_file = Path(__file__).parent / name
        with template_file.open('r') as tf:
            template = tf.read()

        script = replace_vars(template, args)

        with script_file.open(mode='w') as f:
            f.write(script)

        os.chmod(str(script_file), stat.S_IRWXU | stat.S_IRWXG)

    print('Created environment at %s' % (str(prefix),))
    print(
        'Please run "source %s" to start the environment\n'
        % (str(bindir / 'activate'))
    )


if __name__ == '__main__':
    main()

#  vim: set ts=8 sw=4 tw=80:
